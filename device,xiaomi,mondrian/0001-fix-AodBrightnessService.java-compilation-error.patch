From 50539e6d6227fcc8169f61b60100a48f49da138a Mon Sep 17 00:00:00 2001
From: HeCheng Yu <kde-yyds@qq.com>
Date: Fri, 10 Jan 2025 22:36:51 +0800
Subject: [PATCH] fix AodBrightnessService.java compilation error

---
 .../settings/doze/AodBrightnessService.java   | 120 +++++++++---------
 1 file changed, 62 insertions(+), 58 deletions(-)

diff --git a/parts/src/org/lineageos/settings/doze/AodBrightnessService.java b/parts/src/org/lineageos/settings/doze/AodBrightnessService.java
index 3e76310..425ceea 100644
--- a/parts/src/org/lineageos/settings/doze/AodBrightnessService.java
+++ b/parts/src/org/lineageos/settings/doze/AodBrightnessService.java
@@ -15,32 +15,37 @@ import android.hardware.Sensor;
 import android.hardware.SensorEvent;
 import android.hardware.SensorEventListener;
 import android.hardware.SensorManager;
-import android.hardware.display.AmbientDisplayConfiguration;
+import android.os.Handler;
 import android.os.IBinder;
 import android.os.UserHandle;
 import android.provider.Settings;
 import android.util.Log;
 import android.view.Display;
 
-import org.lineageos.settings.utils.DisplayFeatureWrapper;
+import org.lineageos.settings.utils.FileUtils;
 
 public class AodBrightnessService extends Service {
 
     private static final String TAG = "AodBrightnessService";
-    private static final boolean DEBUG = Log.isLoggable(TAG, Log.DEBUG);
+    private static final boolean DEBUG = true;
 
     private static final int SENSOR_TYPE_AOD = 33171029; // xiaomi.sensor.aod
     private static final float AOD_SENSOR_EVENT_BRIGHT = 4f;
     private static final float AOD_SENSOR_EVENT_DIM = 5f;
     private static final float AOD_SENSOR_EVENT_DARK = 3f;
 
-    private static final int DOZE_HBM_BRIGHTNESS_THRESHOLD = 18;
+    private static final String DISP_PARAM_NODE
+            = "/sys/devices/virtual/mi_display/disp_feature/disp-DSI-0/disp_param";
+    private static final String DISP_PARAM_DOZE_HBM = "03 01";
+    private static final String DISP_PARAM_DOZE_LBM = "03 02";
+
+    private static final long SCREEN_OFF_WAIT_MS = 5000L;
+    private static final int DOZE_HBM_BRIGHTNESS_THRESHOLD = 20;
 
     private SensorManager mSensorManager;
     private Sensor mAodSensor;
-    private AmbientDisplayConfiguration mAmbientConfig;
-    private boolean mIsDozing, mIsDozeHbm, mIsAutoBrightnessEnabled;
-    private int mDisplayState = Display.STATE_ON;
+    private boolean mIsDozeHbm;
+    private final Handler mHandler = new Handler();
 
     private final SensorEventListener mSensorListener = new SensorEventListener() {
         @Override
@@ -50,48 +55,54 @@ public class AodBrightnessService extends Service {
         public void onSensorChanged(SensorEvent event) {
             final float value = event.values[0];
             mIsDozeHbm = (value == AOD_SENSOR_EVENT_BRIGHT);
-            if (DEBUG) Log.d(TAG, "onSensorChanged: type=" + event.sensor.getType() + " value=" + value);
-            updateDozeBrightness();
+            dlog("onSensorChanged: type=" + event.sensor.getType() + " value=" + value
+                    + " mIsDozeHbm=" + mIsDozeHbm);
+            if (!mHandler.hasCallbacks(mScreenOffRunnable)) {
+                writeDozeParam();
+            } else {
+                dlog("mScreenOffRunnable pending, skip writeDozeParam");
+            }
         }
     };
 
     private final BroadcastReceiver mScreenStateReceiver = new BroadcastReceiver() {
         @Override
         public void onReceive(Context context, Intent intent) {
-            if (DEBUG) Log.d(TAG, "onReceive: " + intent.getAction());
             switch (intent.getAction()) {
                 case Intent.ACTION_SCREEN_ON:
-                    if (mIsDozing) {
-                        mIsDozing = false;
-                        updateDozeBrightness();
-                        if (mIsAutoBrightnessEnabled) {
-                            mSensorManager.unregisterListener(mSensorListener, mAodSensor);
-                        }
-                    }
+                    dlog("Received ACTION_SCREEN_ON");
+                    mHandler.removeCallbacksAndMessages(null);
+                    mSensorManager.unregisterListener(mSensorListener, mAodSensor);
                     break;
                 case Intent.ACTION_SCREEN_OFF:
-                    if (!mAmbientConfig.alwaysOnEnabled(UserHandle.USER_CURRENT)) {
-                        if (DEBUG) Log.d(TAG, "AOD is not enabled.");
-                        mIsDozing = false;
+                    dlog("Received ACTION_SCREEN_OFF");
+                    if (Settings.Secure.getInt(getContentResolver(),
+                            Settings.Secure.DOZE_ALWAYS_ON, 0) == 0) {
+                        dlog("AOD is disabled by setting.");
                         break;
                     }
-                    if (!mIsDozing) {
-                        mIsDozing = true;
-                        setInitialDozeHbmState();
-                        if (mIsAutoBrightnessEnabled) {
-                            mSensorManager.registerListener(mSensorListener,
-                                    mAodSensor, SensorManager.SENSOR_DELAY_NORMAL);
-                        }
-                    }
-                    break;
-                case Intent.ACTION_DISPLAY_STATE_CHANGED:
-                    mDisplayState = getDisplay().getState();
-                    updateDozeBrightness();
+                    setInitialDozeHbmState();
+                    mSensorManager.registerListener(mSensorListener,
+                            mAodSensor, SensorManager.SENSOR_DELAY_NORMAL);
+                    mHandler.postDelayed(mScreenOffRunnable, SCREEN_OFF_WAIT_MS);
                     break;
             }
         }
     };
-    
+
+    private final Runnable mScreenOffRunnable = () -> {
+        final int displayState = getDisplay().getState();
+        dlog("displayState=" + displayState);
+        if (displayState == Display.STATE_DOZE
+                || displayState == Display.STATE_DOZE_SUSPEND) {
+            Log.i(TAG, "We are dozing, let's do our thing.");
+            writeDozeParam();
+        } else {
+            Log.i(TAG, "Not dozing, unregister AOD sensor.");
+            mSensorManager.unregisterListener(mSensorListener, mAodSensor);
+        }
+    };
+
     public static void startService(Context context) {
          context.startServiceAsUser(new Intent(context, AodBrightnessService.class),
                 UserHandle.CURRENT);
@@ -100,16 +111,15 @@ public class AodBrightnessService extends Service {
     @Override
     public void onCreate() {
         super.onCreate();
-        if (DEBUG) Log.d(TAG, "Creating service");
+        dlog("Creating service");
         mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
-        mAodSensor = mSensorManager.getDefaultSensor(SENSOR_TYPE_AOD, true);
-        mAmbientConfig = new AmbientDisplayConfiguration(this);
+        mAodSensor = mSensorManager.getDefaultSensor(SENSOR_TYPE_AOD);
     }
 
     @Override
     public int onStartCommand(Intent intent, int flags, int startId) {
-        if (DEBUG) Log.d(TAG, "Starting service");
-        IntentFilter screenStateFilter = new IntentFilter(Intent.ACTION_DISPLAY_STATE_CHANGED);
+        dlog("Starting service");
+        IntentFilter screenStateFilter = new IntentFilter();
         screenStateFilter.addAction(Intent.ACTION_SCREEN_ON);
         screenStateFilter.addAction(Intent.ACTION_SCREEN_OFF);
         registerReceiver(mScreenStateReceiver, screenStateFilter);
@@ -118,9 +128,10 @@ public class AodBrightnessService extends Service {
 
     @Override
     public void onDestroy() {
-        if (DEBUG) Log.d(TAG, "Destroying service");
+        dlog("Destroying service");
         unregisterReceiver(mScreenStateReceiver);
         mSensorManager.unregisterListener(mSensorListener, mAodSensor);
+        mHandler.removeCallbacksAndMessages(null);
         super.onDestroy();
     }
 
@@ -133,26 +144,19 @@ public class AodBrightnessService extends Service {
         final int brightness = Settings.System.getInt(getContentResolver(),
                 Settings.System.SCREEN_BRIGHTNESS, 0);
         mIsDozeHbm = (brightness > DOZE_HBM_BRIGHTNESS_THRESHOLD);
-        final int brightnessMode = Settings.System.getInt(getContentResolver(),
-                Settings.System.SCREEN_BRIGHTNESS_MODE,
-                        Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL);
-        mIsAutoBrightnessEnabled = (brightnessMode == Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC);
-        if (DEBUG) Log.d(TAG, "setInitialDozeHbmState: brightness=" + brightness + " mIsDozeHbm=" + mIsDozeHbm
-                + " mIsAutoBrightnessEnabled=" + mIsAutoBrightnessEnabled);
-        updateDozeBrightness();
+        dlog("setInitialDozeHbmState: brightness=" + brightness + " mIsDozeHbm=" + mIsDozeHbm);
     }
 
-    private void updateDozeBrightness() {
-        if (DEBUG) Log.d(TAG, "updateDozeBrightness: mIsDozing=" + mIsDozing + " mDisplayState=" + mDisplayState
-                + " mIsDozeHbm=" + mIsDozeHbm);
-        final boolean isDozeState = mIsDozing && (mDisplayState == Display.STATE_DOZE
-                || mDisplayState == Display.STATE_DOZE_SUSPEND);
-        final int mode = !isDozeState ? 0 : (mIsDozeHbm ? 1 : 2);
-        try {
-            DisplayFeatureWrapper.setDisplayFeature(
-                    new DisplayFeatureWrapper.DfParams(/*DOZE_BRIGHTNESS_STATE*/ 25, mode, 0));
-        } catch (Exception e) {
-            Log.e(TAG, "updateDozeBrightness failed!", e);
+    private void writeDozeParam() {
+        final String dispParam = mIsDozeHbm ? DISP_PARAM_DOZE_HBM : DISP_PARAM_DOZE_LBM;
+        Log.i(TAG, "Enabling doze " + (mIsDozeHbm ? "HBM" : "LBM"));
+        dlog("Writing \"" + dispParam + "\" to disp_param node");
+        if (!FileUtils.writeLine(DISP_PARAM_NODE, dispParam)) {
+            Log.e(TAG, "Failed to write \"" + dispParam + "\" to disp_param node!");
         }
     }
-}
\ No newline at end of file
+
+    private static void dlog(String msg) {
+        if (DEBUG) Log.d(TAG, msg);
+    }
+}
-- 
2.47.0

