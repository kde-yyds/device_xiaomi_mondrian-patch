From c2c2ae2bdc7fd76c9100292017df4a0113da1eec Mon Sep 17 00:00:00 2001
From: minaripenguin <minaripenguin@users.noreply.github.com>
Date: Sun, 5 Jan 2025 16:01:17 +0800
Subject: [PATCH] wm: Make freeform windows always on top

---
 .../wm/shell/freeform/FreeformTaskListener.java    | 14 ++++++++++++++
 .../android/server/wm/ActivityTaskSupervisor.java  | 11 +++++++++++
 .../server/wm/WindowOrganizerController.java       |  3 ++-
 3 files changed, 27 insertions(+), 1 deletion(-)

diff --git a/libs/WindowManager/Shell/src/com/android/wm/shell/freeform/FreeformTaskListener.java b/libs/WindowManager/Shell/src/com/android/wm/shell/freeform/FreeformTaskListener.java
index 83cc18baf..7ae3c5f56 100644
--- a/libs/WindowManager/Shell/src/com/android/wm/shell/freeform/FreeformTaskListener.java
+++ b/libs/WindowManager/Shell/src/com/android/wm/shell/freeform/FreeformTaskListener.java
@@ -24,6 +24,7 @@ import android.app.ActivityManager.RunningTaskInfo;
 import android.content.Context;
 import android.util.SparseArray;
 import android.view.SurfaceControl;
+import android.window.WindowContainerTransaction;
 
 import com.android.internal.protolog.ProtoLog;
 import com.android.wm.shell.ShellTaskOrganizer;
@@ -176,6 +177,7 @@ public class FreeformTaskListener implements ShellTaskOrganizer.TaskListener,
                 repository.addOrMoveFreeformTaskToTop(taskInfo.displayId, taskInfo.taskId);
             });
         }
+        onTaskEnteredFreeform(taskInfo);
     }
 
     @Override
@@ -203,6 +205,18 @@ public class FreeformTaskListener implements ShellTaskOrganizer.TaskListener,
         pw.println(innerPrefix + mTasks.size() + " tasks");
     }
 
+    void onTaskEnteredFreeform(RunningTaskInfo taskInfo) {
+        if (taskInfo == null || taskInfo.getWindowingMode() != WINDOWING_MODE_FREEFORM) {
+            return;
+        }
+        if (!taskInfo.configuration.windowConfiguration.isAlwaysOnTop()) {
+            // A freeform task appeared that was not started by the Shell, make it always-on-top.
+            final WindowContainerTransaction wct = new WindowContainerTransaction();
+            wct.setAlwaysOnTop(taskInfo.token, true);
+            mShellTaskOrganizer.applyTransaction(wct);
+        }
+    }
+
     @Override
     public String toString() {
         return TAG;
diff --git a/services/core/java/com/android/server/wm/ActivityTaskSupervisor.java b/services/core/java/com/android/server/wm/ActivityTaskSupervisor.java
index 50b7526db..2b4107278 100644
--- a/services/core/java/com/android/server/wm/ActivityTaskSupervisor.java
+++ b/services/core/java/com/android/server/wm/ActivityTaskSupervisor.java
@@ -28,6 +28,7 @@ import static android.app.ActivityManager.START_FLAG_NATIVE_DEBUGGING;
 import static android.app.ActivityManager.START_FLAG_TRACK_ALLOCATION;
 import static android.app.ActivityManager.START_TASK_TO_FRONT;
 import static android.app.ActivityOptions.ANIM_REMOTE_ANIMATION;
+import static android.app.ActivityOptions.MODE_BACKGROUND_ACTIVITY_START_ALLOWED;
 import static android.app.ITaskStackListener.FORCED_RESIZEABLE_REASON_SECONDARY_DISPLAY;
 import static android.app.ITaskStackListener.FORCED_RESIZEABLE_REASON_SPLIT_SCREEN;
 import static android.app.WaitResult.INVALID_DELAY;
@@ -2877,6 +2878,16 @@ public class ActivityTaskSupervisor implements RecentTasks.Callbacks {
                     mService.continueWindowLayout();
                 }
             }
+            if (activityOptions != null) {
+                final int windowingMode = activityOptions.getLaunchWindowingMode();
+                if (windowingMode == WINDOWING_MODE_FREEFORM) {
+                    activityOptions.setTaskAlwaysOnTop(true);
+                    activityOptions.setPendingIntentBackgroundActivityStartMode(
+                            MODE_BACKGROUND_ACTIVITY_START_ALLOWED);
+                    activityOptions.setPendingIntentBackgroundActivityLaunchAllowedByPermission(true);
+                    task.setBounds(activityOptions.getLaunchBounds());
+                }
+            }
             taskCallingUid = task.mCallingUid;
             callingPackage = task.mCallingPackage;
             callingFeatureId = task.mCallingFeatureId;
diff --git a/services/core/java/com/android/server/wm/WindowOrganizerController.java b/services/core/java/com/android/server/wm/WindowOrganizerController.java
index 476443aa2..1b33f7df5 100644
--- a/services/core/java/com/android/server/wm/WindowOrganizerController.java
+++ b/services/core/java/com/android/server/wm/WindowOrganizerController.java
@@ -1399,7 +1399,8 @@ class WindowOrganizerController extends IWindowOrganizerController.Stub
                             + container);
                     break;
                 }
-                if (container.asTask() == null && container.asDisplayArea() == null) {
+                if (container.asTask() == null 
+                    && !container.inFreeformWindowingMode() && container.asDisplayArea() == null) {
                     Slog.e(TAG, "Cannot set always-on-top on non-task or non-display area: "
                             + container);
                     break;
-- 
2.47.0

