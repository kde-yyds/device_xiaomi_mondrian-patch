From 4a067097549f654c94cfdcd9fa282625faa09d15 Mon Sep 17 00:00:00 2001
From: minaripenguin <minaripenguin@users.noreply.github.com>
Date: Thu, 15 Aug 2024 09:02:43 +0800
Subject: [PATCH] wm: Make freeform windows always on top

Signed-off-by: minaripenguin <minaripenguin@users.noreply.github.com>
---
 .../wm/shell/freeform/FreeformTaskListener.java    | 14 ++++++++++++++
 .../android/server/wm/ActivityTaskSupervisor.java  | 11 +++++++++++
 .../server/wm/WindowOrganizerController.java       |  3 ++-
 3 files changed, 27 insertions(+), 1 deletion(-)

diff --git a/libs/WindowManager/Shell/src/com/android/wm/shell/freeform/FreeformTaskListener.java b/libs/WindowManager/Shell/src/com/android/wm/shell/freeform/FreeformTaskListener.java
index 7d2aa275a684..f9875906e1fd 100644
--- a/libs/WindowManager/Shell/src/com/android/wm/shell/freeform/FreeformTaskListener.java
+++ b/libs/WindowManager/Shell/src/com/android/wm/shell/freeform/FreeformTaskListener.java
@@ -24,6 +24,7 @@ import android.app.ActivityManager.RunningTaskInfo;
 import android.content.Context;
 import android.util.SparseArray;
 import android.view.SurfaceControl;
+import android.window.WindowContainerTransaction;
 
 import com.android.internal.protolog.common.ProtoLog;
 import com.android.wm.shell.ShellTaskOrganizer;
@@ -110,6 +111,7 @@ public class FreeformTaskListener implements ShellTaskOrganizer.TaskListener,
                 }
             });
         }
+        onTaskEnteredFreeform(taskInfo);
     }
 
     @Override
@@ -173,6 +175,18 @@ public class FreeformTaskListener implements ShellTaskOrganizer.TaskListener,
         }
     }
 
+    void onTaskEnteredFreeform(RunningTaskInfo taskInfo) {
+        if (taskInfo == null || taskInfo.getWindowingMode() != WINDOWING_MODE_FREEFORM) {
+            return;
+        }
+        if (!taskInfo.configuration.windowConfiguration.isAlwaysOnTop()) {
+            // A freeform task appeared that was not started by the Shell, make it always-on-top.
+            final WindowContainerTransaction wct = new WindowContainerTransaction();
+            wct.setAlwaysOnTop(taskInfo.token, true);
+            mShellTaskOrganizer.applyTransaction(wct);
+        }
+    }
+
     @Override
     public void attachChildSurfaceToTask(int taskId, SurfaceControl.Builder b) {
         b.setParent(findTaskSurface(taskId));
diff --git a/services/core/java/com/android/server/wm/ActivityTaskSupervisor.java b/services/core/java/com/android/server/wm/ActivityTaskSupervisor.java
index 3867d2d229ea..3e616f8eef75 100644
--- a/services/core/java/com/android/server/wm/ActivityTaskSupervisor.java
+++ b/services/core/java/com/android/server/wm/ActivityTaskSupervisor.java
@@ -28,6 +28,7 @@ import static android.app.ActivityManager.START_FLAG_NATIVE_DEBUGGING;
 import static android.app.ActivityManager.START_FLAG_TRACK_ALLOCATION;
 import static android.app.ActivityManager.START_TASK_TO_FRONT;
 import static android.app.ActivityOptions.ANIM_REMOTE_ANIMATION;
+import static android.app.ActivityOptions.MODE_BACKGROUND_ACTIVITY_START_ALLOWED;
 import static android.app.ITaskStackListener.FORCED_RESIZEABLE_REASON_SECONDARY_DISPLAY;
 import static android.app.ITaskStackListener.FORCED_RESIZEABLE_REASON_SPLIT_SCREEN;
 import static android.app.WaitResult.INVALID_DELAY;
@@ -2843,6 +2844,16 @@ public class ActivityTaskSupervisor implements RecentTasks.Callbacks {
                     mService.continueWindowLayout();
                 }
             }
+            if (activityOptions != null) {
+                final int windowingMode = activityOptions.getLaunchWindowingMode();
+                if (windowingMode == WINDOWING_MODE_FREEFORM) {
+                    activityOptions.setTaskAlwaysOnTop(true);
+                    activityOptions.setPendingIntentBackgroundActivityStartMode(
+                            MODE_BACKGROUND_ACTIVITY_START_ALLOWED);
+                    activityOptions.setPendingIntentBackgroundActivityLaunchAllowedByPermission(true);
+                    task.setBounds(activityOptions.getLaunchBounds());
+                }
+            }
             taskCallingUid = task.mCallingUid;
             callingPackage = task.mCallingPackage;
             callingFeatureId = task.mCallingFeatureId;
diff --git a/services/core/java/com/android/server/wm/WindowOrganizerController.java b/services/core/java/com/android/server/wm/WindowOrganizerController.java
index edab5605ab8f..09d46506da7e 100644
--- a/services/core/java/com/android/server/wm/WindowOrganizerController.java
+++ b/services/core/java/com/android/server/wm/WindowOrganizerController.java
@@ -1318,7 +1318,8 @@ class WindowOrganizerController extends IWindowOrganizerController.Stub
                             + container);
                     break;
                 }
-                if (container.asTask() == null && container.asDisplayArea() == null) {
+                if (container.asTask() == null 
+                    && !container.inFreeformWindowingMode() && container.asDisplayArea() == null) {
                     Slog.e(TAG, "Cannot set always-on-top on non-task or non-display area: "
                             + container);
                     break;
-- 
2.39.2

