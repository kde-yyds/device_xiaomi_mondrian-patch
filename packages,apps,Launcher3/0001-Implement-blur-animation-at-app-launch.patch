From b5ac2742996fae7db18111309fed31911ca22f9c Mon Sep 17 00:00:00 2001
From: HeCheng Yu <kde-yyds@qq.com>
Date: Sun, 5 Jan 2025 14:41:55 +0800
Subject: [PATCH] Implement blur animation at app launch

Change-Id: Ie32efb615b3f5fcd0f47c7d221818aad4f28a715
---
 .../launcher3/QuickstepTransitionManager.java | 92 ++++++++++++++++++-
 1 file changed, 91 insertions(+), 1 deletion(-)

diff --git a/quickstep/src/com/android/launcher3/QuickstepTransitionManager.java b/quickstep/src/com/android/launcher3/QuickstepTransitionManager.java
index a64936d..08e9a9a 100644
--- a/quickstep/src/com/android/launcher3/QuickstepTransitionManager.java
+++ b/quickstep/src/com/android/launcher3/QuickstepTransitionManager.java
@@ -111,6 +111,8 @@ import android.view.animation.PathInterpolator;
 import android.window.RemoteTransition;
 import android.window.TransitionFilter;
 import android.window.WindowAnimationState;
+import android.graphics.RenderEffect;
+import android.graphics.Shader;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
@@ -174,6 +176,17 @@ import java.util.Collections;
 import java.util.LinkedHashMap;
 import java.util.List;
 
+
+
+class ExponentialEaseOutInterpolator implements Interpolator {
+    @Override
+    public float getInterpolation(float input) {
+        return (float) (1 - Math.pow(2, -10 * input));
+    }
+}
+
+
+
 /**
  * Manages the opening and closing app transitions from Launcher
  */
@@ -1047,7 +1060,7 @@ public class QuickstepTransitionManager implements OnDeviceProfileChangeListener
     /**
      * Returns animator that controls depth/blur of the background.
      */
-    private ObjectAnimator getBackgroundAnimator() {
+/*    private ObjectAnimator getBackgroundAnimator() {
         // When launching an app from overview that doesn't map to a task, we still want to just
         // blur the wallpaper instead of the launcher surface as well
         boolean allowBlurringLauncher = mLauncher.getStateManager().getState() != OVERVIEW
@@ -1089,6 +1102,83 @@ public class QuickstepTransitionManager implements OnDeviceProfileChangeListener
                     depthController.dispose();
                 }));
 
+        return backgroundRadiusAnim;
+    }*/
+    private ObjectAnimator getBackgroundAnimator() {
+        boolean allowBlurringLauncher = mLauncher.getStateManager().getState() != OVERVIEW
+                && BlurUtils.supportsBlursOnWindows();
+
+        LaunchDepthController depthController = new LaunchDepthController(mLauncher);
+        ObjectAnimator backgroundRadiusAnim = ObjectAnimator.ofFloat(depthController.stateDepth,
+                        MULTI_PROPERTY_VALUE, BACKGROUND_APP.getDepth(mLauncher))
+                .setDuration(APP_LAUNCH_DURATION);
+
+        if (allowBlurringLauncher) {
+            View rootView = mLauncher.getDragLayer();
+
+            // Create a composite SurfaceControl layer for everything behind the app animation
+            ViewRootImpl viewRootImpl = rootView.getViewRootImpl();
+            SurfaceControl parentSurface = viewRootImpl != null ? viewRootImpl.getSurfaceControl() : null;
+
+            if (parentSurface != null) {
+                SurfaceControl blurLayer = new SurfaceControl.Builder()
+                        .setName("Blur Layer")
+                        .setParent(parentSurface)
+                        .setOpaque(false)
+                        .setEffectLayer()
+                        .build();
+
+                SurfaceControl.Transaction transaction = new SurfaceControl.Transaction();
+
+                // Create an animator for the blur effect
+                backgroundRadiusAnim.addUpdateListener(animation -> {
+
+            if (mLauncher.getStateManager().getState() == LauncherState.ALL_APPS) {
+                return;
+            }
+                    float animatedValue = (float) animation.getAnimatedValue();
+                    float blurRadius = Math.min(100f, animatedValue * 100f); // Scale blur with animation progress
+
+                    // Dynamically update blur radius
+                    if (blurLayer != null && blurLayer.isValid()) {
+                        transaction.setBackgroundBlurRadius(blurLayer, (int) blurRadius);
+                        transaction.setAlpha(blurLayer, 1f);
+                        transaction.show(blurLayer);
+                        transaction.apply();
+                    }
+                });
+
+                backgroundRadiusAnim.setInterpolator(new ExponentialEaseOutInterpolator());
+
+                // Cleanup on animation end or cancel
+                backgroundRadiusAnim.addListener(new AnimatorListenerAdapter() {
+                    @Override
+                    public void onAnimationEnd(Animator animation) {
+                        cleanupBlurLayer(blurLayer, transaction);
+                    }
+
+                    @Override
+                    public void onAnimationCancel(Animator animation) {
+                        cleanupBlurLayer(blurLayer, transaction);
+                    }
+
+                    private void cleanupBlurLayer(SurfaceControl blurLayer, SurfaceControl.Transaction transaction) {
+                        if (blurLayer != null && blurLayer.isValid()) {
+                            transaction.remove(blurLayer).apply();
+                            blurLayer.release(); // Release the SurfaceControl to avoid leaks
+                        }
+                    }
+                });
+            }
+        }
+
+        backgroundRadiusAnim.addListener(
+                AnimatorListeners.forEndCallback(() -> {
+                    depthController.stateDepth
+                            .setValue(mLauncher.getDepthController().stateDepth.getValue());
+                    depthController.dispose();
+                }));
+
         return backgroundRadiusAnim;
     }
 
-- 
2.47.0

